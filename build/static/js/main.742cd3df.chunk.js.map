{"version":3,"sources":["logo.svg","Components/ProjectImages.js","Components/AdminForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ProjectImages","react_default","a","createElement","accept","id","multiple","type","htmlFor","Fab","color","aria-label","Add_default","React","Component","AdminForm","style","padding","this","props","name","Grid","container","spacing","direction","justify","alignItems","item","md","TextField","label","placeholder","margin","InputLabelProps","shrink","variant","multiline","fullWidth","sm","maxLength","Date","getFullYear","Components_ProjectImages","App","Components_AdminForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+PC2BzBC,mLAnBP,OAAQC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,SACIC,OAAO,UAEPC,GAAG,wBACHC,UAAQ,EACRC,KAAK,SAETN,EAAAC,EAAAC,cAAA,SAAOK,QAAQ,yBACXP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAKC,MAAM,UAAUC,aAAW,OAC5BV,EAAAC,EAAAC,cAACS,EAAAV,EAAD,gBAdAW,IAAMC,WCgGnBC,0LA3FL,OACKd,EAAAC,EAAAC,cAAA,OAAKa,MAAO,CAAEC,QAAS,uBAClBhB,EAAAC,EAAAC,cAAA,mBAAWe,KAAKC,MAAMC,KAAtB,8CACAnB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CACKC,WAAS,EACTC,QAAS,EACTC,UAAU,MACVC,QAAQ,OACRC,WAAW,QAGXzB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GACV3B,EAAAC,EAAAC,cAAA,YAEKF,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CACKxB,GAAG,gBACHyB,MAAM,gBAINC,YAAY,SACZC,OAAO,SACPC,gBAAiB,CAAEC,QAAQ,GAC3BC,QAAQ,SACRC,WAAS,EACTC,WAAS,IAEdpC,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,WAAS,EACVC,QAAS,EACTC,UAAU,MACVC,QAAQ,OACRC,WAAW,QACXzB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMM,MAAI,EAACW,GAAI,GACVrC,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAEKC,MAAM,aACNS,UAAU,IAIVR,aAAa,IAAIS,MAAOC,cACxBT,OAAO,SACPC,gBAAiB,CAAEC,QAAQ,GAC3BC,QAAQ,SACRE,WAAS,KAGnBpC,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMM,MAAI,EAACW,GAAI,GACVrC,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAEKC,MAAM,WACNS,UAAU,IAIVR,aAAa,IAAIS,MAAOC,cACxBT,OAAO,SACPC,gBAAiB,CAAEC,QAAQ,GAC3BC,QAAQ,SACRE,WAAS,MAKxBpC,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CACKxB,GAAG,oBACHyB,MAAM,sBACNC,YAAY,iBACZK,WAAS,EACTC,WAAS,EAETL,OAAO,SACPC,gBAAiB,CAAEC,QAAQ,GAC3BC,QAAQ,aAKvBlC,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GACV3B,EAAAC,EAAAC,cAACuC,EAAD,gBAlFN7B,IAAMC,YCKf6B,MARf,WACE,OACE1C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyC,EAAD,CAAWxB,KAAK,aCIFyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.742cd3df.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\n\n\nclass ProjectImages extends React.Component {\n\n    render() {\n        return (<div>\n                    <h2>Upload Images</h2>\n                    <input\n                        accept=\"image/*\"\n                        // className={classes.input}\n                        id=\"contained-button-file\"\n                        multiple\n                        type=\"file\"\n                    />\n                    <label htmlFor=\"contained-button-file\">\n                        <Fab color=\"primary\" aria-label=\"Add\" /*className={classes.fab}*/>\n                            <AddIcon />\n                        </Fab>\n                    </label>\n                </div>\n        );\n    } \n}\n\nexport default ProjectImages;","import React, { Component } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport ProjectImages from './ProjectImages.js'\n\nimport '../styles/AdminForm.css'\n\n\nclass AdminForm extends React.Component {\n     render() {\n          return (\n               <div style={{ padding: \"0px 50px 70px 50px\" }}>\n                    <h1>Hello {this.props.name}. Welcome to the back end of your website.</h1>\n                    <br />\n                    <Grid\n                         container\n                         spacing={3}\n                         direction=\"row\"\n                         justify=\"left\"\n                         alignItems=\"left\"\n                    >\n\n                         <Grid item md={6} >\n                              <form>\n\n                                   <TextField\n                                        id=\"project-title\"\n                                        label=\"Project Title\"\n                                        // className={classes.textField}\n                                        // value={values.name}\n                                        // onChange={handleChange('name')}\n                                        placeholder=\"Groder\"\n                                        margin=\"normal\"\n                                        InputLabelProps={{ shrink: true }}\n                                        variant=\"filled\"\n                                        multiline\n                                        fullWidth\n                                   />\n                                   <Grid container\n                                        spacing={3}\n                                        direction=\"row\"\n                                        justify=\"left\"\n                                        alignItems=\"left\" >\n                                        <Grid item sm={6}>\n                                             <TextField\n                                                  // id=\"project-title\"\n                                                  label=\"Start Year\"\n                                                  maxLength=\"4\"\n                                                  // className={classes.textField}\n                                                  // value={values.name}\n                                                  // onChange={handleChange('name')}\n                                                  placeholder={new Date().getFullYear()}\n                                                  margin=\"normal\"\n                                                  InputLabelProps={{ shrink: true }}\n                                                  variant=\"filled\"\n                                                  fullWidth\n                                             />\n                                        </Grid>\n                                        <Grid item sm={6}>\n                                             <TextField\n                                                  // id=\"project-title\"\n                                                  label=\"End Year\"\n                                                  maxLength=\"4\"\n                                                  // className={classes.textField}\n                                                  // value={values.name}\n                                                  // onChange={handleChange('name')}\n                                                  placeholder={new Date().getFullYear()}\n                                                  margin=\"normal\"\n                                                  InputLabelProps={{ shrink: true }}\n                                                  variant=\"filled\"\n                                                  fullWidth\n                                             />\n                                        </Grid>\n                                   </Grid>\n\n                                   <TextField\n                                        id=\"standard-textarea\"\n                                        label=\"Project Description\"\n                                        placeholder=\"Dewalt Brander\"\n                                        multiline\n                                        fullWidth\n                                        // className={classes.textField}\n                                        margin=\"normal\"\n                                        InputLabelProps={{ shrink: true }}\n                                        variant=\"filled\"\n                                   />\n\n                              </form>\n                         </Grid>\n                         <Grid item md={6}>\n                              <ProjectImages/>\n                              {/* <div>Image Placeholder</div> */}\n                         </Grid>\n                    </Grid>\n               </div>\n          );\n\n\n     }\n}\n\nexport default AdminForm;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport AdminForm from './Components/AdminForm.js'\n\nfunction App() {\n  return (\n    <div>\n      <AdminForm name='Robert'/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}